/*
 * schedule.c
 *
 *  Created on: Dec 4, 2023
 *      Author: Huy Minh
 */

#include "schedule.h"


void SCH_Update(void) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].Delay > 0) {
            SCH_tasks_G[i].Delay--;
            if (SCH_tasks_G[i].Delay <= 0) {
                SCH_tasks_G[i].RunMe = 1;
            }
        }
    }
}

void SCH_Dispatch_Tasks(void) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].RunMe == 1) {
            SCH_tasks_G[i].pTask();
            SCH_tasks_G[i].RunMe = 0;
            SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
        }
    }
}

uint32_t SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
    for (uint32_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].pTask == NULL) {
            SCH_tasks_G[i].pTask = pFunction;
            SCH_tasks_G[i].Delay = DELAY;
            SCH_tasks_G[i].Period = PERIOD / TICK;
            SCH_tasks_G[i].RunMe = 0;
            SCH_tasks_G[i].TaskID = i + 1;
            return SCH_tasks_G[i].TaskID;
        }
    }
    return NO_TASK_ID;
}

uint8_t SCH_Delete_Task(uint32_t taskID) {
    for (uint8_t i = 0; i < SCH_MAX_TASKS; i++) {
        if (SCH_tasks_G[i].TaskID == taskID) {
            for (uint8_t j = i; j < SCH_MAX_TASKS; j++) {
                SCH_tasks_G[j] = SCH_tasks_G[j + 1];
            }
            return 1;
        }
    }
    return 0;
}






