/*
 * schedule.h
 *
 *  Created on: Dec 4, 2023
 *      Author: Huy Minh
 */

#ifndef INC_SCHEDULE_H_
#define INC_SCHEDULE_H_


#include "global.h"

typedef struct {
    // Pointer to the task (must be a 'void (void)' function)
	void ( * pTask)(void);
	// Delay (ticks) until the function will (next) be run
	uint32_t Delay;
	// Interval (ticks) between subsequent runs.
	uint32_t Period;
	// Incremented (by scheduler) when task is due to execute
	uint8_t RunMe;
	//This is a hint to solve the question below.
	uint32_t TaskID;
} sTask;

// MUST BE ADJUSTED FOR EACH NEW PROJECT
#define SCH_MAX_TASKS 			40
#define	NO_TASK_ID				0
sTask SCH_tasks_G[SCH_MAX_TASKS];




void SCH_Init();
unsigned char SCH_Add_Task(void (* pFunction)(), unsigned int DELAY, unsigned int PERIOD);
void SCH_Update();
void SCH_Dispatch_Tasks();
unsigned char SCH_Delete_Task(const tByte TASK_INDEX);
void SCH_Go_To_Sleep();















#endif /* INC_SCHEDULE_H_ */
